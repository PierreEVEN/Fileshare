extends fileshare

block files

    - function humanFileSize(bytes) {
    -   const thresh = 1024;

    -   if (Math.abs(bytes) < thresh) {
    -     return bytes + ' B';
    -   }

    -   const units = ['ko', 'Mo', 'Go', 'To', 'Po', 'Eo', 'Zo', 'Yo']
    -   let u = -1;
    -   const r = 10;
    -   do {
    -     bytes /= thresh;
    -     ++u;
    -   } while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);
    -   return bytes.toFixed(1) + ' ' + units[u];
    - }

    link(href="https://vjs.zencdn.net/8.5.2/video-js.css", rel="stylesheet")
    link(href='/stylesheets/fileshare/item-preview.css', rel='stylesheet')
    script(src="https://vjs.zencdn.net/8.5.2/video.min.js")
    div(id='file-list')



    script.
        const access_key = "!{locals.session_data.selected_repos.access_key}"
        const repos_data = {}
        const div_file_list = document.getElementById('file-list')
        let current_folder = null;

        function fill_content() {
            fetch('/fileshare/repos/' + access_key + '/content/')
                .then((response) => response.json())
                .then((json) => {

                    const virtual_content = {files: [], folders: {}, parent: null, name: json.name}

                    const path_formatted = (path) => {
                        if (path.length === 0 || path === '/')
                            return []
                        if (path[0] === '/')
                            path = path.slice(1);
                        return path.split('/').reverse()
                    }

                    const insert_file = (path, file, target) => {

                        if (path.length === 0)
                            target.files.push(file)
                        else {
                            const current_path = path.pop();
                            if (!target.folders[current_path])
                                target.folders[current_path] = {files: [], folders: {}, parent: target, name: current_path}
                            insert_file(path, file, target.folders[current_path])
                        }
                    }

                    json.content.forEach((e) => {
                        insert_file(path_formatted(e.virtual_folder), e, virtual_content)
                    })

                    repos_data.root = virtual_content;
                    repos_data.access_key = json.access_key;
                    view_folder(repos_data.root);
                });
        }
        fill_content();

        function view_folder(hierarchy, parent) {
            current_folder = hierarchy;
            update_top(current_folder);
            div_file_list.innerHTML = ''

            for (const folder of Object.values(hierarchy.folders)) {
                const object_button = document.createElement('div');
                object_button.onclick = () => view_folder(folder);
                object_button.classList.add('object-button')
                const div = document.createElement('div');
                div.classList.add('item-preview')
                div.classList.add('folder')
                div.innerHTML = `<img src="/images/icons/icons8-folder-96.png" alt="dossier">
                                 <p>${folder.name}</p>`;
                object_button.append(div)
                div_file_list.append(object_button);
            }

            for (const file of hierarchy.files) {
                const url = '/fileshare/repos/' + repos_data.access_key + '/file/' + file.id;
                const object_button = document.createElement('div');
                object_button.onclick = () => open_this_item(object_button, file, url);
                object_button.classList.add('object-button')
                const div = document.createElement('div');
                div.classList.add('item-preview')
                div.innerHTML = gen_item(file.name, url, file.size, file.mimetype, true);
                object_button.append(div);
                div_file_list.append(object_button);
            }
        }

        document.addEventListener('keydown', (event) => {
            if (event.key === 'Backspace' && current_folder.parent)
                view_folder(current_folder.parent)
        }, false);

        function open_this_item(div, file, url) {
            const new_div = document.createElement('div');
            new_div.classList.add('item-plain')
            if (div) {
                new_div.style.width = div.getBoundingClientRect().width + 'px';
                new_div.style.height = div.getBoundingClientRect().height + 'px';
                new_div.style.left = div.getBoundingClientRect().x + 'px';
                new_div.style.top = div.getBoundingClientRect().y + 'px';
            } else {
                new_div.style.width = '100%';
                new_div.style.height = '100%';
                new_div.style.left = '0';
                new_div.style.top = '0';
            }

            if (document.last_selected_item)
                document.last_selected_item.remove();

            document.last_selected_item = new_div;
            document.body.append(new_div)

            new_div.innerHTML = gen_item(file.name, url, file.size, file.mimetype, false);
            new_div.onclick = (e) => {
                if (e.target === document.last_selected_item)
                    close_item_plain();
            }
        }

        document.onkeydown = (e) => {
            if (e.key === "Escape") { // escape key maps to keycode `27`
                close_item_plain();
            }
        }

        function close_item_plain() {
            if (document.last_selected_item)
                document.last_selected_item.remove()
            document.last_selected_item = null
        }

        function gen_item(name, url, size, mimetype, thumbnail) {
            if (mimetype.startsWith('image/'))
                if (thumbnail)
                    return `<img src="${url}/thumbnail" alt = "${name}">`
                else
                    return `<img src="${url}" alt="${name}">`
            else if (mimetype === 'text/plain')
                return `<img src="https://img.icons8.com/?size=512&id=12053" alt="document">`
            else if (mimetype === 'application/pdf')
                return `<img src="https://img.icons8.com/?size=512&id=13417" alt="document">`
            else if (mimetype === 'application/octet-stream')
                return `<img src="https://img.icons8.com/?size=512&id=38992" alt="document">`
            else if (mimetype.startsWith('video/')) {
                if (thumbnail)
                    return `<img src="${url}/thumbnail" alt = "${name}">
                            <img src="/images/icons/icons8-play-64.png" alt="play icon">`
                else
                    return `<video id="my-video" class="video-js" controls width="100%" height="90%" preload="auto" autoplay="true" data-setup="{}">
                    <source src="${url}" type="${mimetype}">
                    <p class="vjs-no-js"> To view this video please enable JavaScript, and consider upgrading to a web browser that
                    </p>
                    <a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
                </video>`
            }

            return `<p>${name}</p>`
        }