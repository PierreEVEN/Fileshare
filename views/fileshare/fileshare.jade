extends layout

block content
    link(rel='stylesheet', href='/stylesheets/fileshare/user-viewport.css')
    div.user-viewport
        include repos_list
        include repos_viewport

    script.
        let files_to_upload = new Map();

        function dragStartEvent(ev) {
            ev.originalTarget.style.cursor = 'copy'
            ev.originalTarget.style.border = '5px yellow dashed'
            ev.originalTarget.style['border-radius'] = '20px'
            ev.preventDefault();
        }

        function dragStopEvent(ev) {
            ev.originalTarget.style.cursor = 'cursor'
            ev.originalTarget.style.border = '0'
            ev.originalTarget.style['border-radius'] = '0'
            ev.preventDefault();
        }

        function dragOverHandler(ev) {
            ev.preventDefault();
        }

        function dropHandler(ev) {
            dragStopEvent(ev)
            ev.preventDefault();
            if (ev.dataTransfer.items) {
                [...ev.dataTransfer.items].forEach((item, i) => {
                    // If dropped items aren't files, reject them
                    if (item.kind === "file") {
                        const entry = "getAsEntry" in DataTransferItem.prototype ? item.getAsEntry() : item.webkitGetAsEntry();
                        if (entry.isDirectory) return;
                        const file = item.getAsFile();
                        if (file.size === 0) return;
                        files_to_upload.set(file.name, file);
                    }
                });
            } else {
                // Use DataTransfer interface to access the file(s)
                [...ev.dataTransfer.files].forEach((file, i) => {
                    if (file.size === 0) return;
                    files_to_upload.set(file.name, file);
                });
            }

            open_upload_modale_for_files(files_to_upload)
        }

        const modale_item =  document.getElementById('modale')
        modale_item.addEventListener('drop', dropHandler)
        modale_item.addEventListener('dragover', dragOverHandler)


        function humanFileSize(bytes) {
            const thresh = 1024;

            if (Math.abs(bytes) < thresh) {
                return bytes + ' o';
            }

            const units = ['ko', 'Mo', 'Go', 'To', 'Po', 'Eo', 'Zo', 'Yo']
            let u = -1;
            const r = 10;

            do {
                bytes /= thresh;
                ++u;
            } while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);


            return bytes.toFixed(1) + ' ' + units[u];
        }

        function seconds_to_str(in_seconds) {
            const milliseconds = in_seconds * 1000;

            function numberEnding(number) {
                return (number > 1) ? 's' : '';
            }

            let temp = Math.floor(milliseconds / 1000);
            const years = Math.floor(temp / 31536000);
            if (years) {
                return years + ' ann√©es' + numberEnding(years);
            }
            //TODO: Months! Maybe weeks?
            const days = Math.floor((temp %= 31536000) / 86400);
            if (days) {
                return days + ' jours' + numberEnding(days);
            }
            const hours = Math.floor((temp %= 86400) / 3600);
            if (hours) {
                return hours + ' heures' + numberEnding(hours);
            }
            const minutes = Math.floor((temp %= 3600) / 60);
            if (minutes) {
                return minutes + ' minutes' + numberEnding(minutes);
            }
            const seconds = temp % 60;
            if (seconds) {
                return seconds + ' secondes' + numberEnding(seconds);
            }
            return '0s';
        }

        function open_upload_modale_for_files(files) {
            files_to_upload = files;
            const send_files = document.createElement('div')
            send_files.classList.add('login')

            let files_code = ''
            for (const value of files_to_upload.values()) {
                files_code += `
                <div class="file-item">
                    <div class="left-fields">
                        <div>
                            <p>Titre</p>
                            <input class="item-title" type="text" value="${value.name}"></p>
                        </div>
                        <div>
                            <textarea class="item-description" placeholder="Description"></textarea>
                        </div>
                    </div>
                    <div class="right-fields">
                        <button onclick="files_to_upload.delete('${value.name}'); open_upload_modale_for_files(files_to_upload)">
                            <img src="/images/icons/icons8-trash-52.png" alt="Trash icon">
                        </button>
                        <p>${humanFileSize(value.size)}</p>
                    </div>
                </div>
                `
            }

            send_files.innerHTML = `
            <h1>Envoyer des fichiers</h1>
            <div class="upload-file-list">
            ${files_code}
            </div>
            <div class="progress-container">
                <div id="progress-bar"></div>
            </div>
            <p id="progress-text"></p>
            <div class="send-buttons">
                <input type="button" class="add-file-button" value="+" onclick="open_file_dialog()">
                <button class="cancel-button" onclick="cancel_upload(); files_to_upload = new Map(); close_modale()">Annuler</button>
                <button onclick="upload_files()">Envoyer</button>
            </div>
            `
            open_modale(send_files, '500px', '80%');
        }
        
        let progress = document.getElementById('progress-bar')
        let progress_text = document.getElementById('progress-text')
        let last_request = null;
        let deltas = []
        let last_file_upload_measure = null

        function cancel_upload() {
            reset_all();
        }

        function upload_files() {

            progress = document.getElementById('progress-bar')
            progress_text = document.getElementById('progress-text')
            cancel_upload()

            const req = new XMLHttpRequest();
            req.upload.addEventListener("progress", updateProgress);
            const current_repos = document.getElementById('current-repos').attributes.repos.value
            req.open("POST", `/fileshare/repos/${current_repos}/upload`);
            const form = new FormData();
            for (const file of files_to_upload.values())
                form.append("file" + file.name, file, file.name);

            last_request = req;
            last_file_upload_measure = {size: 0, timestamp: performance.now()}
            req.onreadystatechange = function () {
                if (this.readyState === this.DONE) {
                    window.location.href = this.responseURL;
                }
            };
            req.send(form);
        }

        function updateProgress(e) {

            let mean_speed = 0;
            if (last_file_upload_measure) {
                const time_delta = (performance.now() - last_file_upload_measure.timestamp) / 1000;
                const size_delta = e.loaded - last_file_upload_measure.size;

                deltas.push(size_delta / time_delta)


                last_file_upload_measure.size = e.loaded;
                last_file_upload_measure.timestamp = performance.now();

                if (deltas.length > 20) {
                    deltas.splice(0, 1);
                }

                for (const delta of deltas)
                    mean_speed += delta;
                mean_speed /= deltas.length
            }

            const remaining = (e.total - e.loaded) / mean_speed

            progress_text.innerText = `${Math.round(e.loaded / e.total * 100)}% (${humanFileSize(e.loaded)} / ${humanFileSize(e.total)}) - ${humanFileSize(mean_speed)}/s (~${seconds_to_str(remaining)})`
            progress.style.width = (((e.loaded / e.total) * 100)) + "%";
        }



        function reset_all() {

            if (last_request)
                last_request.abort();
            last_request = null;
            deltas = [];
            last_file_upload_measure = null;
            if (progress_text)
                progress_text.innerText = '';
            if (progress)
                progress.style.width = '0%';
        }

        function open_file_dialog() {
            const inputElement = document.createElement("input");
            inputElement.type = "file";
            inputElement.multiple = true;
            inputElement.addEventListener("change", (e) => {
                for (const file of e.target.files)
                    files_to_upload.set(file.name, file);
                open_upload_modale_for_files(files_to_upload);
            })
            inputElement.dispatchEvent(new MouseEvent("click"));
        }

    if locals.forcer_show_upload
        script.
            open_upload_modale_for_files(files_to_upload);